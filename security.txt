# SECURITY
## Many ways to handle security, auth/auth 
## FastAPI provides several tools to help deal with security easily, rapidly, standardized approach, abstracts complexity of security specifications
1. OAuth2 - extensive, complex spec that defines several ways to handle auth/auth. Most systems that use 3rd party (login with google fb etc) use underneath.
2. OpenID Connect - spec based on OAuth2 that extends it 
*3. OpenAPI = open spec for building APIs - FastAPI is based on OpenAPI. It has way to define multiple security 'schemas' so you can take advantage of standard-based tools.
	OpenAPI security schema defines:
	apikey - app specific key (that comes form query param/header/cookie)
	http - standard http auth system; includes (bearer - header auth with value 'Bearer' + token inherited from OAuth2), (HTTP basic auth) etc
	oauth2 - all the oauth2 ways to handle security (called 'flows') --> implicit, clientCredentials, authorizationCode, password, etc
		(password is perfect flow for handling auth directly in the app)
	openIdConnect - way to define how to discover oauth2 auth data automatically
	----> FastAPI provides several utilities/tools for each of these security schemas in the fastapi.security module to simplify using the security mechanisms.
## OAuth2 designed so BE or API is independent of the server that auths the user.  
### OAuth2:
## password 'flow' one of the ways/flows defined in OAuth2 to handle security, auth.
	when user logs in API responds with a token to verify user. FE stores token temporarily. token is send in 'Authorization' header with 'Bearer' value + the token. 
	OAuth2 specifies that when using password flow to login path operation client must send 'username' and 'password' as fields as form data NOT JSON with those specific names to be compatible with the spec.
	spec also says client can add 'scope' form field - which is a long str with multiple scopes separated by spaces using to declare specific security permissions (eg. users:read users:write)
	FastAPI util to get 'username' 'password' --> OAuth2PasswordRequestForm dependency in path operation (see code)
	OAuth2PasswordRequestForm is a class dependency that declares a form body with 'username', 'password' option[scope, grant_type, client_id, client_secret]
****Once security flow complete --> make it acutually secure using 1. JWT tokens and 2. secure password hashing
	JWT - standard to codify JSON object in a long dense (UNENCRYPTED!) str without spaces - so still able to recover info from contents.
	HOWEVER--> JWT gets 'signed' so you can verify the token and ensure that the token has not been modified as that would change the signature.
	NOTE - JWT 'sub' key contains subject of the token (optional to use, it is where you put user identification --> this allows you to add permissions later for authorized operations that entity can do while avoiding ID collissions (eg. different entities with similar values in fields would not be given the same permission since stored on token given to specific entity at login as long as it is linked to a unique identifier))
INSTALL MODULE TO GENERATE AND VERIFY JWT --> need to pip install python-jose[crytpography]		 
	requires cryptographic BE --> pyca/cryptography ([cryptography])
	(PyJWT also an option but less features/extras for integration)
PASSWORD HASHING - use algo to convert some content into sequence of bytes:str Algo only works one way (you cannot convert hashed content back to original but if you hash the same content you will get the same hashed content so can compare)
	pip install passlib[bcrypt] ---> where bcrypt is hashing algo. (passlib support other secure hashing algo & utils)
	--> A. create passlib context (used to hash + verify password using algo)  
		B. THEN create util function to hash the password (pwd_context.hash)  + 
		C. util function to verify that recieved password matches the stored hashed password (pwd_context.verify)  + 
		D. util function to auth and return to client.
		E. Define Pydantic model to use in token endpoint for the response
		F. util function to generate new access token
